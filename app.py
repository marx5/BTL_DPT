import streamlit as st
import os
import pandas as pd
import tempfile
from audio_features import extract_audio_features
import joblib
import numpy as np
import glob

OUTPUTS_DIR = "outputs"
DB_CSV = "audio_features_db.csv"
SCALER_PATH = "scaler_save.pkl"
DB_DIR = "audio_db"

os.makedirs(OUTPUTS_DIR, exist_ok=True)

# H√†m xo√° to√†n b·ªô file trong outputs/
def clear_outputs_folder(outputs_dir):
    for file in glob.glob(os.path.join(outputs_dir, "*")):
        try:
            os.remove(file)
        except Exception as e:
            pass  # ho·∫∑c in(f"L·ªói xo√° {file}: {e}")

def cosine_similarity(vec1, vec2):
    v1 = np.array(vec1, dtype=float)
    v2 = np.array(vec2, dtype=float)
    num = np.dot(v1, v2)
    denom = (np.linalg.norm(v1) * np.linalg.norm(v2))
    return num / denom if denom != 0 else 0

FEATURE_NAMES = {
    "energy": "NƒÉng l∆∞·ª£ng",
    "zero_crossing_rate": "T·ªëc ƒë·ªô ƒë·ªïi d·∫•u",
    "percent_silence": "Kho·∫£ng l·∫∑ng (%)",
    "bandwidth": "BƒÉng th√¥ng (Hz)",
    "spectral_centroid": "Trung t√¢m ph·ªï (Hz)",
    "harmonicity": "ƒê·ªô ƒëi·ªÅu h√≤a (dB)",
    "pitch": "ƒê·ªô cao (Hz)"
}

st.set_page_config(page_title="Truy v·∫•n nh·∫°c c·ª• b·ªô h∆°i", layout="wide")
st.title("üé∑ H·ªá th·ªëng truy v·∫•n & nh·∫≠n d·∫°ng nh·∫°c c·ª• b·ªô h∆°i")

with st.expander("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng", expanded=False):
    st.markdown(
        """
        1. T·∫£i file √¢m thanh truy v·∫•n (.wav) ph√≠a tr√°i.
        2. H·ªá th·ªëng tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng, hi·ªÉn th·ªã b·∫£ng so s√°nh v·ªõi c∆° s·ªü d·ªØ li·ªáu.
        3. Nghe th·ª≠, xem ·∫£nh ph·ªï v√† tra c·ª©u top 3 file gi·ªëng nh·∫•t.
        4. ƒê·ªô t∆∞∆°ng ƒë·ªìng t√≠nh b·∫±ng Cosine tr√™n ƒë·∫∑c tr∆∞ng ƒë√£ chu·∫©n h√≥a.
        """
    )

# LAYOUT: 2 c·ªôt
left, right = st.columns([1,2])

with left:
    uploaded_file = st.file_uploader("üéº Ch·ªçn file .wav truy v·∫•n", type=["wav"])
    if uploaded_file is not None:
        # Xo√° to√†n b·ªô file trong outputs/ m·ªói l·∫ßn nh·∫≠n d·∫°ng m·ªõi
        clear_outputs_folder(OUTPUTS_DIR)

        with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as tmpf:
            tmpf.write(uploaded_file.read())
            file_path = tmpf.name

        input_spec_path = os.path.join(OUTPUTS_DIR, "input_spec.png")
        input_features = extract_audio_features(file_path, save_spectrogram_path=input_spec_path)
        st.markdown("**üéß Nghe th·ª≠ file truy v·∫•n:**")
        st.audio(uploaded_file, format="audio/wav")
        st.image(input_spec_path, caption="·∫¢nh ph·ªï truy v·∫•n", use_container_width=True)
        # Hi·ªÉn th·ªã b·∫£ng ƒë·∫∑c tr∆∞ng truy v·∫•n
        st.markdown("**üîé ƒê·∫∑c tr∆∞ng truy v·∫•n**")
        feature_table = pd.DataFrame(
            [[input_features[k] for k in FEATURE_NAMES.keys()]],
            columns=[FEATURE_NAMES[k] for k in FEATURE_NAMES.keys()]
        ).T
        feature_table.columns = ["Gi√° tr·ªã"]
        st.dataframe(feature_table, use_container_width=True)

with right:
    if uploaded_file is not None:
        if not os.path.isfile(DB_CSV) or not os.path.isfile(SCALER_PATH):
            st.error("Ch∆∞a c√≥ file audio_features_db.csv ho·∫∑c scaler_save.pkl! H√£y ch·∫°y script tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng tr∆∞·ªõc.")
        else:
            df = pd.read_csv(DB_CSV)
            scaler = joblib.load(SCALER_PATH)
            feature_cols = list(FEATURE_NAMES.keys())
            X_db = df[feature_cols].values
            query_vec_df = pd.DataFrame([[input_features[c] for c in feature_cols]], columns=feature_cols)
            query_vec_scaled = scaler.transform(query_vec_df)[0]
            sim_scores = []
            for i, row in df.iterrows():
                db_vec = X_db[i]
                sim = cosine_similarity(query_vec_scaled, db_vec)
                sim_scores.append({
                    "filename": row["filename"],
                    "label": row.get("label", ""),
                    "cosine": sim,
                    **{k: row[k] for k in feature_cols}
                })
            results_df = pd.DataFrame(sim_scores)
            results_df = results_df.sort_values(by="cosine", ascending=False)
            top3 = results_df.head(3)

            # st.markdown("### üìä **So s√°nh to√†n b·ªô c∆° s·ªü d·ªØ li·ªáu** (b·∫•m v√†o b·∫£ng ƒë·ªÉ xem chi ti·∫øt)")
            # show_cols = ["filename", "label", "cosine"] + list(FEATURE_NAMES.keys())
            # results_show = results_df[show_cols]
            # results_show = results_show.rename(columns={
            #     "filename": "File",
            #     "label": "Nh·∫°c c·ª•",
            #     "cosine": "ƒê·ªô t∆∞∆°ng ƒë·ªìng (Cosine)",
            #     **FEATURE_NAMES
            # })
            # st.dataframe(results_show.style.highlight_max(subset=["ƒê·ªô t∆∞∆°ng ƒë·ªìng (Cosine)"], color="lightgreen"), height=340)

            st.markdown("### ü•á **Top 3 file t∆∞∆°ng ƒë·ªìng nh·∫•t**")
            for idx, row in top3.iterrows():
                col1, col2 = st.columns([1,2])
                with col1:
                    st.markdown(f"**File:** `{row['filename']}`<br>**Nh·∫°c c·ª•:** {row['label']}<br>**ƒê·ªô t∆∞∆°ng ƒë·ªìng:** `{row['cosine']:.4f}`", unsafe_allow_html=True)
                    file_in_db = os.path.join(DB_DIR, row["filename"])
                    if os.path.exists(file_in_db):
                        st.audio(file_in_db, format="audio/wav")
                    else:
                        st.warning("Kh√¥ng t√¨m th·∫•y file g·ªëc ƒë·ªÉ ph√°t th·ª≠.")
                with col2:
                    spec_db = os.path.join(OUTPUTS_DIR, f"{row['filename']}_spec.png")
                    if not os.path.isfile(spec_db):
                        try:
                            extract_audio_features(file_in_db, save_spectrogram_path=spec_db)
                        except: pass
                    if os.path.exists(spec_db):
                        st.image(spec_db, caption="·∫¢nh ph·ªï DB", use_container_width=True)

        # Xo√° file t·∫°m
        try:
            os.remove(file_path)
            os.remove(input_spec_path)
        except:
            pass
